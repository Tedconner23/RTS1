//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""MapMove"",
            ""id"": ""5c6039a2-5550-42d2-ae10-dda29a42562a"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""831c57f5-73c4-4dad-8f67-02d2618dc524"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""75f9abc2-7c3f-431a-8758-1e82b20c09f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""7ff4052f-a8a0-4b7f-9ec8-1bea12f54291"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""a25b2178-f014-455d-b612-d2ff26dc54b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollDown"",
                    ""type"": ""Button"",
                    ""id"": ""271c1254-3c15-4c75-b48d-25173e4c60ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScrollUp"",
                    ""type"": ""Button"",
                    ""id"": ""2123049d-4f8f-42a6-a12c-fd45d0054364"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraRotateCCW"",
                    ""type"": ""Button"",
                    ""id"": ""09a05cac-f0f6-4e1f-9bd8-2effd50ce64e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraRotateCW"",
                    ""type"": ""Button"",
                    ""id"": ""ad85ec76-bee3-448e-8cba-39d2f689ebb2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0e4566ed-9ef6-4f27-bda8-16f8017e0b44"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd6b4081-a8c0-4c41-9ddf-45f04f328849"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5542ab3d-62be-4774-bb05-86ba252181ac"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""268eb3b7-a08a-4d9a-a6c3-83656877d0ae"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f1022c8-e7a2-4b11-9cf7-0f0996f1577d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ffd4750-e9d7-4a05-bcd3-02ea17c82b69"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c617e269-7f89-4e53-a741-4b38f4000422"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05750312-3272-4e2c-8151-1161c134ce5b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb295bbf-39c4-467c-a2b7-11e9303ca162"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""ScrollDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9bab742-1fc3-4476-8c44-734dde715f3d"",
                    ""path"": ""<Keyboard>/pageDown"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebf6686b-5aaa-4334-9358-8cca2733e0ac"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4e62cd5-b4d7-4347-a2af-a13ea661d264"",
                    ""path"": ""<Keyboard>/pageDown"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e0f0da7-371a-4a81-8072-793915edcaf3"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotateCCW"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4291132d-f320-4a5a-8434-8af10b1d2b67"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotateCW"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""New action map"",
            ""id"": ""c0cba66f-9433-4eea-9a87-6b4a486a347e"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""571c92f9-859a-448d-a415-ec2d5a2d0074"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0d69b321-a7db-4f7c-b335-710815adaf42"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Player"",
            ""bindingGroup"": ""Player"",
            ""devices"": []
        }
    ]
}");
        // MapMove
        m_MapMove = asset.FindActionMap("MapMove", throwIfNotFound: true);
        m_MapMove_Forward = m_MapMove.FindAction("Forward", throwIfNotFound: true);
        m_MapMove_Back = m_MapMove.FindAction("Back", throwIfNotFound: true);
        m_MapMove_Left = m_MapMove.FindAction("Left", throwIfNotFound: true);
        m_MapMove_Right = m_MapMove.FindAction("Right", throwIfNotFound: true);
        m_MapMove_ScrollDown = m_MapMove.FindAction("ScrollDown", throwIfNotFound: true);
        m_MapMove_ScrollUp = m_MapMove.FindAction("ScrollUp", throwIfNotFound: true);
        m_MapMove_CameraRotateCCW = m_MapMove.FindAction("CameraRotateCCW", throwIfNotFound: true);
        m_MapMove_CameraRotateCW = m_MapMove.FindAction("CameraRotateCW", throwIfNotFound: true);
        // New action map
        m_Newactionmap = asset.FindActionMap("New action map", throwIfNotFound: true);
        m_Newactionmap_Newaction = m_Newactionmap.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MapMove
    private readonly InputActionMap m_MapMove;
    private List<IMapMoveActions> m_MapMoveActionsCallbackInterfaces = new List<IMapMoveActions>();
    private readonly InputAction m_MapMove_Forward;
    private readonly InputAction m_MapMove_Back;
    private readonly InputAction m_MapMove_Left;
    private readonly InputAction m_MapMove_Right;
    private readonly InputAction m_MapMove_ScrollDown;
    private readonly InputAction m_MapMove_ScrollUp;
    private readonly InputAction m_MapMove_CameraRotateCCW;
    private readonly InputAction m_MapMove_CameraRotateCW;
    public struct MapMoveActions
    {
        private @PlayerActions m_Wrapper;
        public MapMoveActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_MapMove_Forward;
        public InputAction @Back => m_Wrapper.m_MapMove_Back;
        public InputAction @Left => m_Wrapper.m_MapMove_Left;
        public InputAction @Right => m_Wrapper.m_MapMove_Right;
        public InputAction @ScrollDown => m_Wrapper.m_MapMove_ScrollDown;
        public InputAction @ScrollUp => m_Wrapper.m_MapMove_ScrollUp;
        public InputAction @CameraRotateCCW => m_Wrapper.m_MapMove_CameraRotateCCW;
        public InputAction @CameraRotateCW => m_Wrapper.m_MapMove_CameraRotateCW;
        public InputActionMap Get() { return m_Wrapper.m_MapMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapMoveActions set) { return set.Get(); }
        public void AddCallbacks(IMapMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_MapMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MapMoveActionsCallbackInterfaces.Add(instance);
            @Forward.started += instance.OnForward;
            @Forward.performed += instance.OnForward;
            @Forward.canceled += instance.OnForward;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @ScrollDown.started += instance.OnScrollDown;
            @ScrollDown.performed += instance.OnScrollDown;
            @ScrollDown.canceled += instance.OnScrollDown;
            @ScrollUp.started += instance.OnScrollUp;
            @ScrollUp.performed += instance.OnScrollUp;
            @ScrollUp.canceled += instance.OnScrollUp;
            @CameraRotateCCW.started += instance.OnCameraRotateCCW;
            @CameraRotateCCW.performed += instance.OnCameraRotateCCW;
            @CameraRotateCCW.canceled += instance.OnCameraRotateCCW;
            @CameraRotateCW.started += instance.OnCameraRotateCW;
            @CameraRotateCW.performed += instance.OnCameraRotateCW;
            @CameraRotateCW.canceled += instance.OnCameraRotateCW;
        }

        private void UnregisterCallbacks(IMapMoveActions instance)
        {
            @Forward.started -= instance.OnForward;
            @Forward.performed -= instance.OnForward;
            @Forward.canceled -= instance.OnForward;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @ScrollDown.started -= instance.OnScrollDown;
            @ScrollDown.performed -= instance.OnScrollDown;
            @ScrollDown.canceled -= instance.OnScrollDown;
            @ScrollUp.started -= instance.OnScrollUp;
            @ScrollUp.performed -= instance.OnScrollUp;
            @ScrollUp.canceled -= instance.OnScrollUp;
            @CameraRotateCCW.started -= instance.OnCameraRotateCCW;
            @CameraRotateCCW.performed -= instance.OnCameraRotateCCW;
            @CameraRotateCCW.canceled -= instance.OnCameraRotateCCW;
            @CameraRotateCW.started -= instance.OnCameraRotateCW;
            @CameraRotateCW.performed -= instance.OnCameraRotateCW;
            @CameraRotateCW.canceled -= instance.OnCameraRotateCW;
        }

        public void RemoveCallbacks(IMapMoveActions instance)
        {
            if (m_Wrapper.m_MapMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMapMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_MapMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MapMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MapMoveActions @MapMove => new MapMoveActions(this);

    // New action map
    private readonly InputActionMap m_Newactionmap;
    private List<INewactionmapActions> m_NewactionmapActionsCallbackInterfaces = new List<INewactionmapActions>();
    private readonly InputAction m_Newactionmap_Newaction;
    public struct NewactionmapActions
    {
        private @PlayerActions m_Wrapper;
        public NewactionmapActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Newactionmap_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Newactionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NewactionmapActions set) { return set.Get(); }
        public void AddCallbacks(INewactionmapActions instance)
        {
            if (instance == null || m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(INewactionmapActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(INewactionmapActions instance)
        {
            if (m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INewactionmapActions instance)
        {
            foreach (var item in m_Wrapper.m_NewactionmapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NewactionmapActions @Newactionmap => new NewactionmapActions(this);
    private int m_PlayerSchemeIndex = -1;
    public InputControlScheme PlayerScheme
    {
        get
        {
            if (m_PlayerSchemeIndex == -1) m_PlayerSchemeIndex = asset.FindControlSchemeIndex("Player");
            return asset.controlSchemes[m_PlayerSchemeIndex];
        }
    }
    public interface IMapMoveActions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnScrollDown(InputAction.CallbackContext context);
        void OnScrollUp(InputAction.CallbackContext context);
        void OnCameraRotateCCW(InputAction.CallbackContext context);
        void OnCameraRotateCW(InputAction.CallbackContext context);
    }
    public interface INewactionmapActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
